{
  "address": "0xC4aF6bef6c94d0DD4A9CbBb0784818c55D710E26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISemaphore",
          "name": "_semaphore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ballotAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "BallotCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ballots",
      "outputs": [
        {
          "internalType": "contract Ballot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "name": "createBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBallots",
      "outputs": [
        {
          "internalType": "contract Ballot[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBallotAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBallotCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "semaphore",
      "outputs": [
        {
          "internalType": "contract ISemaphore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ced7012494aaa0f4235d89822cdc0d7937c31a1713caa637efa93a120b87d60",
  "receipt": {
    "to": null,
    "from": "0x5a4e9Bb1f224e8254C1d63e90dE34E8572f8dC71",
    "contractAddress": "0xC4aF6bef6c94d0DD4A9CbBb0784818c55D710E26",
    "transactionIndex": 0,
    "gasUsed": "859079",
    "logsBloom": "0x
    "blockHash": "0x22625e50712b290397620f3b62e7e9baa79124ca758f0bc32dca964c2f976fe5",
    "transactionHash": "0x1ced7012494aaa0f4235d89822cdc0d7937c31a1713caa637efa93a120b87d60",
    "logs": [],
    "blockNumber": 6433476,
    "cumulativeGasUsed": "859079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1e0d7FF1610e480fC93BdEC510811ea2Ba6d7c2f"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b3f96ee31a87c97d4e1adbc1f2a8b4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISemaphore\",\"name\":\"_semaphore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ballotAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"BallotCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"contract Ballot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"name\":\"createBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBallots\",\"outputs\":[{\"internalType\":\"contract Ballot[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBallotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBallotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"semaphore\",\"outputs\":[{\"internalType\":\"contract ISemaphore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BallotFactory.sol\":\"BallotFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@semaphore-protocol/contracts/interfaces/ISemaphore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/// @title Semaphore contract interface.\\ninterface ISemaphore {\\n    error Semaphore__GroupHasNoMembers();\\n    error Semaphore__MerkleTreeDepthIsNotSupported();\\n    error Semaphore__MerkleTreeRootIsExpired();\\n    error Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\\n    error Semaphore__YouAreUsingTheSameNullifierTwice();\\n    error Semaphore__InvalidProof();\\n\\n    /// It defines all the group parameters used by Semaphore.sol.\\n    struct Group {\\n        uint256 merkleTreeDuration;\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\n        mapping(uint256 => bool) nullifiers;\\n    }\\n\\n    /// It defines all the Semaphore proof parameters used by Semaphore.sol.\\n    struct SemaphoreProof {\\n        uint256 merkleTreeDepth;\\n        uint256 merkleTreeRoot;\\n        uint256 nullifier;\\n        uint256 message;\\n        uint256 scope;\\n        uint256[8] points;\\n    }\\n\\n    /// @dev Event emitted when the Merkle tree duration of a group is updated.\\n    /// @param groupId: Id of the group.\\n    /// @param oldMerkleTreeDuration: Old Merkle tree duration of the group.\\n    /// @param newMerkleTreeDuration: New Merkle tree duration of the group.\\n    event GroupMerkleTreeDurationUpdated(\\n        uint256 indexed groupId,\\n        uint256 oldMerkleTreeDuration,\\n        uint256 newMerkleTreeDuration\\n    );\\n\\n    /// @dev Event emitted when a Semaphore proof is validated.\\n    /// @param groupId: Id of the group.\\n    /// @param merkleTreeDepth: Depth of the Merkle tree.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param nullifier: Nullifier.\\n    /// @param message: Semaphore message.\\n    /// @param scope: Scope.\\n    /// @param points: Zero-knowledge points.\\n    event ProofValidated(\\n        uint256 indexed groupId,\\n        uint256 merkleTreeDepth,\\n        uint256 indexed merkleTreeRoot,\\n        uint256 nullifier,\\n        uint256 message,\\n        uint256 indexed scope,\\n        uint256[8] points\\n    );\\n\\n    /// @dev Returns the current value of the group counter.\\n    /// @return The current group counter value.\\n    function groupCounter() external view returns (uint256);\\n\\n    /// @dev See {SemaphoreGroups-_createGroup}.\\n    function createGroup() external returns (uint256);\\n\\n    /// @dev See {SemaphoreGroups-_createGroup}.\\n    function createGroup(address admin) external returns (uint256);\\n\\n    /// @dev It creates a group with a custom Merkle tree duration.\\n    /// @param admin: Admin of the group. It can be an Ethereum account or a smart contract.\\n    /// @param merkleTreeDuration: Merkle tree duration.\\n    /// @return Id of the group.\\n    function createGroup(address admin, uint256 merkleTreeDuration) external returns (uint256);\\n\\n    /// @dev See {SemaphoreGroups-_updateGroupAdmin}.\\n    function updateGroupAdmin(uint256 groupId, address newAdmin) external;\\n\\n    /// @dev See {SemaphoreGroups-_acceptGroupAdmin}.\\n    function acceptGroupAdmin(uint256 groupId) external;\\n\\n    /// @dev Updates the group Merkle tree duration.\\n    /// @param groupId: Id of the group.\\n    /// @param newMerkleTreeDuration: New Merkle tree duration.\\n    function updateGroupMerkleTreeDuration(uint256 groupId, uint256 newMerkleTreeDuration) external;\\n\\n    /// @dev See {SemaphoreGroups-_addMember}.\\n    function addMember(uint256 groupId, uint256 identityCommitment) external;\\n\\n    /// @dev See {SemaphoreGroups-_addMembers}.\\n    function addMembers(uint256 groupId, uint256[] calldata identityCommitments) external;\\n\\n    /// @dev See {SemaphoreGroups-_updateMember}.\\n    function updateMember(\\n        uint256 groupId,\\n        uint256 oldIdentityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata merkleProofSiblings\\n    ) external;\\n\\n    /// @dev See {SemaphoreGroups-_removeMember}.\\n    function removeMember(uint256 groupId, uint256 identityCommitment, uint256[] calldata merkleProofSiblings) external;\\n\\n    /// @dev Saves the nullifier hash to prevent double signaling and emits an event\\n    /// if the zero-knowledge proof is valid.\\n    /// @param groupId: Id of the group.\\n    /// @param proof: Semaphore zero-knowledge proof.\\n    function validateProof(uint256 groupId, SemaphoreProof calldata proof) external;\\n\\n    /// @dev Verifies a zero-knowledge proof by returning true or false.\\n    /// @param groupId: Id of the group.\\n    /// @param proof: Semaphore zero-knowledge proof.\\n    function verifyProof(uint256 groupId, SemaphoreProof calldata proof) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x16a8b4f4c240197c3f01d3c548d2a21f7fb30a9e97e3ed2753bae89ba9c180c0\",\"license\":\"MIT\"},\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@semaphore-protocol/contracts/interfaces/ISemaphore.sol\\\";\\n\\n/// @title Voting with delegation.a\\ncontract Ballot {\\n\\n    ISemaphore public semaphore;\\n    uint256 public groupId;\\n\\n    struct Voter {\\n        bool joined;\\n        uint vote;\\n    }\\n\\n    struct Proposal {\\n        bytes32 name;\\n        uint voteCount;\\n    }\\n\\n    mapping(address => Voter) public voters;\\n\\n    Proposal[] public proposals;\\n\\n    constructor(bytes32[] memory proposalNames, ISemaphore _semaphore) {\\n        semaphore = _semaphore;\\n        groupId = semaphore.createGroup();\\n\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    function vote(uint proposal, ISemaphore.SemaphoreProof calldata proof) external {\\n        Voter storage voter = voters[msg.sender];\\n        require(voter.joined, \\\"Did not joined the voting group\\\");\\n\\n        // This will validate the proof and revert if the proof was already used\\n        // which means that each user that joined can only vote once \\n        semaphore.validateProof(groupId, proof);\\n\\n        voter.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += 1;\\n    }\\n\\n    /// @dev User joins the voting poll\\n    /// each user can only join and vote once.\\n    function joinBallot(uint256 identityCommitment) external {\\n        require(!voters[msg.sender].joined, \\\"User already joined the ballot\\\");\\n        semaphore.addMember(groupId, identityCommitment);\\n        voters[msg.sender].joined = true;\\n    }\\n\\n    /// @dev Computes the winning proposal taking all\\n    /// previous votes into account.\\n    function winningProposal() public view returns (uint winningProposal_) {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    // Calls winningProposal() function to get the index\\n    // of the winner contained in the proposals array and then\\n    // returns the name of the winner\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    function proposalCount() public view returns(uint count) {\\n        return proposals.length;\\n    }\\n\\n    function getAllProposals() public view returns (Proposal[] memory) {\\n        return proposals;\\n    }\\n}\",\"keccak256\":\"0x139a21588a10dee916c7926b2527def75af5d0870aaa38c35a5d8307ac4cdec5\",\"license\":\"GPL-3.0\"},\"contracts/BallotFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./Ballot.sol\\\";\\nimport \\\"@semaphore-protocol/contracts/interfaces/ISemaphore.sol\\\";\\n\\ncontract BallotFactory {\\n    Ballot[] public ballots;\\n    ISemaphore public semaphore;\\n\\n    event BallotCreated(address ballotAddress, uint256 groupId);\\n\\n    constructor(ISemaphore _semaphore) {\\n        semaphore = _semaphore;\\n    }\\n\\n    function createBallot(bytes32[] memory proposalNames) public returns (address) {\\n        Ballot newBallot = new Ballot(proposalNames, semaphore);\\n        ballots.push(newBallot);\\n        emit BallotCreated(address(newBallot), newBallot.groupId());\\n\\n        return address(newBallot);\\n    }\\n\\n    function getBallotCount() public view returns (uint) {\\n        return ballots.length;\\n    }\\n\\n    function getBallotAddress(uint index) public view returns (address) {\\n        require(index < ballots.length, \\\"Invalid index\\\");\\n        \\n        return address(ballots[index]);\\n    }\\n\\n    function getAllBallots() public view returns (Ballot[] memory) {\\n        return ballots;\\n    }    \\n}\",\"keccak256\":\"0xcb57ec162b881e08f42faf50a6ddd9689d3e9b4d1a5d7db77d909fa3965abe1b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610eb8380380610eb883398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e25806100936000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630b8710e4146100675780635c632b38146100855780637b5d2534146100b05780637efa9ae3146100c3578063b4741495146100d6578063e35c9384146100e7575b600080fd5b61006f6100fa565b60405161007c9190610348565b60405180910390f35b610098610093366004610395565b61015c565b6040516001600160a01b03909116815260200161007c565b600154610098906001600160a01b031681565b6100986100d1366004610395565b610186565b60005460405190815260200161007c565b6100986100f53660046103c4565b6101fa565b6060600080548060200260200160405190810160405280929190818152602001828054801561015257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610134575b5050505050905090565b6000818154811061016c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106101cc5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640160405180910390fd5b600082815481106101df576101df610482565b6000918252602090912001546001600160a01b031692915050565b600154604051600091829184916001600160a01b03169061021a9061033b565b610225929190610498565b604051809103906000f080158015610241573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383169081179091556040805163507a264960e11b815290519293507f6e7c37da91a26ba23559329528dbc95326e46b7135bcef5ef0916f98d84753c19284929163a0f44c929160048083019260209291908290030181865afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906104f2565b604080516001600160a01b03909316835260208301919091520160405180910390a192915050565b6108e48061050c83390190565b6020808252825182820181905260009190848201906040850190845b818110156103895783516001600160a01b031683529284019291840191600101610364565b50909695505050505050565b6000602082840312156103a757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156103d757600080fd5b823567ffffffffffffffff808211156103ef57600080fd5b818501915085601f83011261040357600080fd5b813581811115610415576104156103ae565b8060051b604051601f19603f8301168101818110858211171561043a5761043a6103ae565b60405291825284820192508381018501918883111561045857600080fd5b938501935b828510156104765784358452938501939285019261045d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b604080825283519082018190526000906020906060840190828701845b828110156104d1578151845292840192908401906001016104b5565b5050506001600160a01b039490941660209390930192909252509092915050565b60006020828403121561050457600080fd5b505191905056fe608060405234801561001057600080fd5b506040516108e43803806108e483398101604081905261002f91610157565b600080546001600160a01b0319166001600160a01b03831690811782556040805163575185ed60e01b81529051919263575185ed9260048084019360209390839003909101908290875af115801561008b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100af9190610226565b60015560005b825181101561011d57600360405180604001604052808584815181106100dd576100dd61023f565b60209081029190910181015182526000918101829052835460018181018655948352918190208351600290930201918255919091015190820155016100b5565b505050610255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461015257600080fd5b919050565b6000806040838503121561016a57600080fd5b82516001600160401b038082111561018157600080fd5b818501915085601f83011261019557600080fd5b81516020828211156101a9576101a9610125565b8160051b604051601f19603f830116810181811086821117156101ce576101ce610125565b6040529283528183019350848101820192898411156101ec57600080fd5b948201945b8386101561020a578551855294820194938201936101f1565b9650610219905087820161013b565b9450505050509250929050565b60006020828403121561023857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b610680806102646000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3ec138d11610066578063a3ec138d1461012f578063cceb68f514610173578063d5d4738f14610188578063da35c6641461019b578063e2ba53f0146101a357600080fd5b8063013cf08b146100a35780635e11085b146100d0578063609ff1bd146100e55780637b5d2534146100fb578063a0f44c9214610126575b600080fd5b6100b66100b13660046104ed565b6101ab565b604080519283526020830191909152015b60405180910390f35b6100e36100de3660046104ed565b6101d9565b005b6100ed6102c9565b6040519081526020016100c7565b60005461010e906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b6100ed60015481565b61015c61013d366004610506565b6002602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016100c7565b61017b61033c565b6040516100c79190610536565b6100e3610196366004610585565b6103af565b6003546100ed565b6100ed6104ba565b600381815481106101bb57600080fd5b60009182526020909120600290910201805460019091015490915082565b3360009081526002602052604090205460ff161561023e5760405162461bcd60e51b815260206004820152601e60248201527f5573657220616c7265616479206a6f696e6564207468652062616c6c6f74000060448201526064015b60405180910390fd5b600054600154604051631783efc360e01b81526001600160a01b0390921691631783efc39161027a918590600401918252602082015260400190565b600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050336000908152600260205260409020805460ff19166001179055505050565b600080805b6003548110156103375781600382815481106102ec576102ec6105bf565b906000526020600020906002020160010154111561032f5760038181548110610317576103176105bf565b90600052602060002090600202016001015491508092505b6001016102ce565b505090565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156103a657838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610360565b50505050905090565b336000908152600260205260409020805460ff1661040f5760405162461bcd60e51b815260206004820152601f60248201527f446964206e6f74206a6f696e65642074686520766f74696e672067726f7570006044820152606401610235565b60005460015460405163d0d898dd60e01b81526001600160a01b039092169163d0d898dd916104429186906004016105d5565b600060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b5050505060018082018490556003805485908110610490576104906105bf565b906000526020600020906002020160010160008282546104b09190610623565b9091555050505050565b600060036104c66102c9565b815481106104d6576104d66105bf565b906000526020600020906002020160000154905090565b6000602082840312156104ff57600080fd5b5035919050565b60006020828403121561051857600080fd5b81356001600160a01b038116811461052f57600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561057857815180518552860151868501529284019290850190600101610553565b5091979650505050505050565b6000808284036101c081121561059a57600080fd5b833592506101a0601f19820112156105b157600080fd5b506020830190509250929050565b634e487b7160e01b600052603260045260246000fd5b60006101c08201905083825282356020830152602083013560408301526040830135606083015260608301356080830152608083013560a083015261010060a0840160c08401379392505050565b8082018082111561064457634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212207fb87df7f3b0f9226bee01015debd36e4a141328e6d5fb974dea2aa16fa9950d64736f6c63430008170033a26469706673582212202c70c75df240ddf40aecdbe373209d94b436e591d5202d655213214c340bb3bd64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630b8710e4146100675780635c632b38146100855780637b5d2534146100b05780637efa9ae3146100c3578063b4741495146100d6578063e35c9384146100e7575b600080fd5b61006f6100fa565b60405161007c9190610348565b60405180910390f35b610098610093366004610395565b61015c565b6040516001600160a01b03909116815260200161007c565b600154610098906001600160a01b031681565b6100986100d1366004610395565b610186565b60005460405190815260200161007c565b6100986100f53660046103c4565b6101fa565b6060600080548060200260200160405190810160405280929190818152602001828054801561015257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610134575b5050505050905090565b6000818154811061016c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106101cc5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640160405180910390fd5b600082815481106101df576101df610482565b6000918252602090912001546001600160a01b031692915050565b600154604051600091829184916001600160a01b03169061021a9061033b565b610225929190610498565b604051809103906000f080158015610241573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383169081179091556040805163507a264960e11b815290519293507f6e7c37da91a26ba23559329528dbc95326e46b7135bcef5ef0916f98d84753c19284929163a0f44c929160048083019260209291908290030181865afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906104f2565b604080516001600160a01b03909316835260208301919091520160405180910390a192915050565b6108e48061050c83390190565b6020808252825182820181905260009190848201906040850190845b818110156103895783516001600160a01b031683529284019291840191600101610364565b50909695505050505050565b6000602082840312156103a757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156103d757600080fd5b823567ffffffffffffffff808211156103ef57600080fd5b818501915085601f83011261040357600080fd5b813581811115610415576104156103ae565b8060051b604051601f19603f8301168101818110858211171561043a5761043a6103ae565b60405291825284820192508381018501918883111561045857600080fd5b938501935b828510156104765784358452938501939285019261045d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b604080825283519082018190526000906020906060840190828701845b828110156104d1578151845292840192908401906001016104b5565b5050506001600160a01b039490941660209390930192909252509092915050565b60006020828403121561050457600080fd5b505191905056fe608060405234801561001057600080fd5b506040516108e43803806108e483398101604081905261002f91610157565b600080546001600160a01b0319166001600160a01b03831690811782556040805163575185ed60e01b81529051919263575185ed9260048084019360209390839003909101908290875af115801561008b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100af9190610226565b60015560005b825181101561011d57600360405180604001604052808584815181106100dd576100dd61023f565b60209081029190910181015182526000918101829052835460018181018655948352918190208351600290930201918255919091015190820155016100b5565b505050610255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461015257600080fd5b919050565b6000806040838503121561016a57600080fd5b82516001600160401b038082111561018157600080fd5b818501915085601f83011261019557600080fd5b81516020828211156101a9576101a9610125565b8160051b604051601f19603f830116810181811086821117156101ce576101ce610125565b6040529283528183019350848101820192898411156101ec57600080fd5b948201945b8386101561020a578551855294820194938201936101f1565b9650610219905087820161013b565b9450505050509250929050565b60006020828403121561023857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b610680806102646000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3ec138d11610066578063a3ec138d1461012f578063cceb68f514610173578063d5d4738f14610188578063da35c6641461019b578063e2ba53f0146101a357600080fd5b8063013cf08b146100a35780635e11085b146100d0578063609ff1bd146100e55780637b5d2534146100fb578063a0f44c9214610126575b600080fd5b6100b66100b13660046104ed565b6101ab565b604080519283526020830191909152015b60405180910390f35b6100e36100de3660046104ed565b6101d9565b005b6100ed6102c9565b6040519081526020016100c7565b60005461010e906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b6100ed60015481565b61015c61013d366004610506565b6002602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016100c7565b61017b61033c565b6040516100c79190610536565b6100e3610196366004610585565b6103af565b6003546100ed565b6100ed6104ba565b600381815481106101bb57600080fd5b60009182526020909120600290910201805460019091015490915082565b3360009081526002602052604090205460ff161561023e5760405162461bcd60e51b815260206004820152601e60248201527f5573657220616c7265616479206a6f696e6564207468652062616c6c6f74000060448201526064015b60405180910390fd5b600054600154604051631783efc360e01b81526001600160a01b0390921691631783efc39161027a918590600401918252602082015260400190565b600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050336000908152600260205260409020805460ff19166001179055505050565b600080805b6003548110156103375781600382815481106102ec576102ec6105bf565b906000526020600020906002020160010154111561032f5760038181548110610317576103176105bf565b90600052602060002090600202016001015491508092505b6001016102ce565b505090565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156103a657838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610360565b50505050905090565b336000908152600260205260409020805460ff1661040f5760405162461bcd60e51b815260206004820152601f60248201527f446964206e6f74206a6f696e65642074686520766f74696e672067726f7570006044820152606401610235565b60005460015460405163d0d898dd60e01b81526001600160a01b039092169163d0d898dd916104429186906004016105d5565b600060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b5050505060018082018490556003805485908110610490576104906105bf565b906000526020600020906002020160010160008282546104b09190610623565b9091555050505050565b600060036104c66102c9565b815481106104d6576104d66105bf565b906000526020600020906002020160000154905090565b6000602082840312156104ff57600080fd5b5035919050565b60006020828403121561051857600080fd5b81356001600160a01b038116811461052f57600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561057857815180518552860151868501529284019290850190600101610553565b5091979650505050505050565b6000808284036101c081121561059a57600080fd5b833592506101a0601f19820112156105b157600080fd5b506020830190509250929050565b634e487b7160e01b600052603260045260246000fd5b60006101c08201905083825282356020830152602083013560408301526040830135606083015260608301356080830152608083013560a083015261010060a0840160c08401379392505050565b8082018082111561064457634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212207fb87df7f3b0f9226bee01015debd36e4a141328e6d5fb974dea2aa16fa9950d64736f6c63430008170033a26469706673582212202c70c75df240ddf40aecdbe373209d94b436e591d5202d655213214c340bb3bd64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2980,
        "contract": "contracts/BallotFactory.sol:BallotFactory",
        "label": "ballots",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Ballot)2972)dyn_storage"
      },
      {
        "astId": 2983,
        "contract": "contracts/BallotFactory.sol:BallotFactory",
        "label": "semaphore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISemaphore)1727"
      }
    ],
    "types": {
      "t_array(t_contract(Ballot)2972)dyn_storage": {
        "base": "t_contract(Ballot)2972",
        "encoding": "dynamic_array",
        "label": "contract Ballot[]",
        "numberOfBytes": "32"
      },
      "t_contract(Ballot)2972": {
        "encoding": "inplace",
        "label": "contract Ballot",
        "numberOfBytes": "20"
      },
      "t_contract(ISemaphore)1727": {
        "encoding": "inplace",
        "label": "contract ISemaphore",
        "numberOfBytes": "20"
      }
    }
  }
}