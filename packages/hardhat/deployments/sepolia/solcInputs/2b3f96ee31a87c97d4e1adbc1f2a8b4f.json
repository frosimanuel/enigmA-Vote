{
  "language": "Solidity",
  "sources": {
    "@semaphore-protocol/contracts/base/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/// @dev Minimum supported tree depth.\nuint8 constant MIN_DEPTH = 1;\n\n/// @dev Maximum supported tree depth.\nuint8 constant MAX_DEPTH = 32;\n"
    },
    "@semaphore-protocol/contracts/base/SemaphoreGroups.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {ISemaphoreGroups} from \"../interfaces/ISemaphoreGroups.sol\";\nimport {InternalLeanIMT, LeanIMTData} from \"@zk-kit/lean-imt.sol/InternalLeanIMT.sol\";\n\n/// @title Semaphore groups contract.\n/// @dev This contract allows you to create groups, add, remove and update members.\n/// You can use getters to obtain informations about groups (root, depth, number of leaves).\nabstract contract SemaphoreGroups is ISemaphoreGroups {\n    using InternalLeanIMT for LeanIMTData;\n\n    /// @dev Gets a group id and returns its tree data.\n    /// The tree is an Incremental Merkle Tree\n    /// which is called Lean Incremental Merkle Tree.\n    mapping(uint256 => LeanIMTData) internal merkleTrees;\n\n    /// @dev Gets a group id and returns its admin.\n    /// The admin can be an Ethereum account or a smart contract.\n    mapping(uint256 => address) internal admins;\n\n    /// @dev Gets a group id and returns any pending admin.\n    /// The pending admin can be an Ethereum account or a smart contract.\n    mapping(uint256 => address) internal pendingAdmins;\n\n    /// @dev Checks if the group admin is the transaction sender.\n    /// @param groupId: Id of the group.\n    modifier onlyGroupAdmin(uint256 groupId) {\n        if (admins[groupId] != msg.sender) {\n            revert Semaphore__CallerIsNotTheGroupAdmin();\n        }\n        _;\n    }\n\n    /// @dev Checks if the group exists.\n    /// @param groupId: Id of the group.\n    modifier onlyExistingGroup(uint256 groupId) {\n        if (admins[groupId] == address(0)) {\n            revert Semaphore__GroupDoesNotExist();\n        }\n\n        _;\n    }\n\n    /// @dev Creates a new group. Only the admin will be able to add or remove members.\n    /// @param groupId: Id of the group.\n    /// @param admin: Admin of the group.\n    function _createGroup(uint256 groupId, address admin) internal virtual {\n        admins[groupId] = admin;\n\n        emit GroupCreated(groupId);\n        emit GroupAdminUpdated(groupId, address(0), admin);\n    }\n\n    /// @dev Updates the group admin. In order for the new admin to actually be updated,\n    /// they must explicitly accept by calling `_acceptGroupAdmin`.\n    /// @param groupId: Id of the group.\n    /// @param newAdmin: New admin of the group.\n    function _updateGroupAdmin(uint256 groupId, address newAdmin) internal virtual onlyGroupAdmin(groupId) {\n        pendingAdmins[groupId] = newAdmin;\n\n        emit GroupAdminPending(groupId, msg.sender, newAdmin);\n    }\n\n    /// @dev Allows the new admin to accept to update the group admin with their address.\n    /// @param groupId: Id of the group.\n    function _acceptGroupAdmin(uint256 groupId) internal virtual {\n        if (pendingAdmins[groupId] != msg.sender) {\n            revert Semaphore__CallerIsNotThePendingGroupAdmin();\n        }\n\n        address oldAdmin = admins[groupId];\n\n        admins[groupId] = msg.sender;\n\n        delete pendingAdmins[groupId];\n\n        emit GroupAdminUpdated(groupId, oldAdmin, msg.sender);\n    }\n\n    /// @dev Adds an identity commitment to an existing group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: New identity commitment.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _addMember(\n        uint256 groupId,\n        uint256 identityCommitment\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = getMerkleTreeSize(groupId);\n        merkleTreeRoot = merkleTrees[groupId]._insert(identityCommitment);\n\n        emit MemberAdded(groupId, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Adds new members to an existing group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitments: New identity commitments.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _addMembers(\n        uint256 groupId,\n        uint256[] calldata identityCommitments\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 startIndex = getMerkleTreeSize(groupId);\n        merkleTreeRoot = merkleTrees[groupId]._insertMany(identityCommitments);\n\n        emit MembersAdded(groupId, startIndex, identityCommitments, merkleTreeRoot);\n    }\n\n    /// @dev Updates an identity commitment of an existing group. A proof of membership is\n    /// needed to check if the node to be updated is part of the tree.\n    /// @param groupId: Id of the group.\n    /// @param oldIdentityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param merkleProofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _updateMember(\n        uint256 groupId,\n        uint256 oldIdentityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = merkleTrees[groupId]._indexOf(oldIdentityCommitment);\n        merkleTreeRoot = merkleTrees[groupId]._update(\n            oldIdentityCommitment,\n            newIdentityCommitment,\n            merkleProofSiblings\n        );\n\n        emit MemberUpdated(groupId, index, oldIdentityCommitment, newIdentityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Removes an identity commitment from an existing group. A proof of membership is\n    /// needed to check if the node to be deleted is part of the tree.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param merkleProofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _removeMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = merkleTrees[groupId]._indexOf(identityCommitment);\n\n        merkleTreeRoot = merkleTrees[groupId]._remove(identityCommitment, merkleProofSiblings);\n\n        emit MemberRemoved(groupId, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev See {ISemaphoreGroups-getGroupAdmin}.\n    function getGroupAdmin(uint256 groupId) public view virtual override returns (address) {\n        return admins[groupId];\n    }\n\n    /// @dev See {ISemaphoreGroups-hasMember}.\n    function hasMember(uint256 groupId, uint256 identityCommitment) public view virtual override returns (bool) {\n        return merkleTrees[groupId]._has(identityCommitment);\n    }\n\n    /// @dev See {ISemaphoreGroups-indexOf}.\n    function indexOf(uint256 groupId, uint256 identityCommitment) public view virtual override returns (uint256) {\n        return merkleTrees[groupId]._indexOf(identityCommitment);\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeRoot}.\n    function getMerkleTreeRoot(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId]._root();\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeDepth}.\n    function getMerkleTreeDepth(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId].depth;\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeSize}.\n    function getMerkleTreeSize(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId].size;\n    }\n}\n"
    },
    "@semaphore-protocol/contracts/base/SemaphoreVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Part of this file was generated with [snarkJS](https://github.com/iden3/snarkjs).\n\npragma solidity 0.8.23;\n\nimport {MAX_DEPTH} from \"./Constants.sol\";\n\ncontract SemaphoreVerifier {\n    // Scalar field size\n    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax = 16428432848801857252194528405604668803277877773566238944394625302971855135431;\n    uint256 constant alphay = 16846502678714586896801519656441059708016666274385668027902869494772365009666;\n    uint256 constant betax1 = 3182164110458002340215786955198810119980427837186618912744689678939861918171;\n    uint256 constant betax2 = 16348171800823588416173124589066524623406261996681292662100840445103873053252;\n    uint256 constant betay1 = 4920802715848186258981584729175884379674325733638798907835771393452862684714;\n    uint256 constant betay2 = 19687132236965066906216944365591810874384658708175106803089633851114028275753;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    // Verification Key points.\n    // These values are taken from the verification key json file generated with snarkjs.\n    // It allows to use the same verifier to verify proofs for all the tree depths supported by Semaphore.\n    uint256[14][MAX_DEPTH] VK_POINTS = [\n        [\n            18358547564487905095688479908858987846616998213156437518686067355563592118237,\n            15662648751553932653781975807624464121405704024803073886925976686616010387354,\n            1545474538105908330267074270190095622354834966212647889547653097055078098224,\n            12579159544968648693964563165973893448704730885005100826654630574108054705556,\n            20602000776800724705104231353971008348678632605343811527051139864158800058742,\n            14100125742256756091734688090621667470723401759459592787502475801413744195297,\n            5090583730862410755830979584235210054631184460526892606022709842010236308675,\n            4935746665478263580470501879719907639988899436008466660042851826337922233613,\n            3603230519262933722323237889869128969156000998401789817930265262617368730462,\n            11467103179184542033012124498958167915605281189440445972230559164572312725202,\n            20354120984011889701917116306955017859695028034788955847437411305304360829487,\n            16952752114474306858880411587178692742589121096026762314329638709126787301483,\n            18678961143994743003180318723146092299060216598083112257165966782010215931454,\n            5866474510945308764957529269555101130643879788634167019342763906927794156659\n        ],\n        [\n            15357842752194390032830879177519514606613356943505010426726499926726016517582,\n            13720528004476084359207196371475762368424714925503835663451917882430924467554,\n            2196656647584375999320189230399052835502476576494068012902156164580595749760,\n            14571933744484927053512012311263939678215066456565339237074260778179419354637,\n            15947740979005208428427315036716544174249364023308166418156254508145278950889,\n            13324328715790405384125386378518079709609297588403011236512446709595322048979,\n            18308129219862888344083447566760955160779532192553849267018614487088634836563,\n            6372459765603725576424215986727450779217530423615747931788702584026023386877,\n            7093003777162632186231777482293120808844116758585672698445917711442486215336,\n            15357576732947512625016950088762579987226580659874157718142226214458009204755,\n            13910597919064508360434043231000553781072135406219661606166769706745413894201,\n            9475901949906914147982792916474633312982452326368523201024844634638043554494,\n            5845138751782936895477553974859998077996624699108246120208069774017428318479,\n            3326095377373657419775174404381825686428913179751401123841216020519623741775\n        ],\n        [\n            1096090542237876305763822439899873238394525438826581012748557492836778110917,\n            18282758355470198230938465615400409713402004038201360061031317503584711879237,\n            7973969975759518869552865162652900479072033124669141796195141770899882758383,\n            2920496587818605789230962034477809982324000981266163502059117507002917895757,\n            8027751638293718359199675565570157214590620386957299982399037269650333307021,\n            19002113380575481191643777830101182489616906893723699470070419138254788369727,\n            13631613009301650992828160964785768170789209232530437462516754147352285424672,\n            10537705110128905270703523362934130036880036854847578111990360444182641655212,\n            15557574650831364767567015658284909068256128766563081293491003990055297878366,\n            4049724481871929240016595616316679773340938699307608349394228543495262553744,\n            9967066649437927083270210032320564587652082866881800887188539489167094397640,\n            12463426560961961450861478284334163210886016242490079948590082000657390077088,\n            21318595425700216078579789307308348011199610228556265752904860757510620370622,\n            7430155508771673067823897542900534022148544854722115377830369283854627952599\n        ],\n        [\n            14033304028688398404089545751254979569049699915340551984412184456786819712695,\n            17529478610649635357901422564682249462969460088983393810272144503916885638629,\n            968190632906420692452807865081290940343138767641492735661467959437198373032,\n            7242759178038747404494096998044224993169513816067824413031492987300456908934,\n            12017353327534072098763415761011052990865822334777878720246921848197559257711,\n            4746680322053291743787031203095442352574780441873349801788355375401126089939,\n            6764632552006100580460767171096753901452726344615530017064702126145414585640,\n            11581587935666673652762153205827599529022773836189155792609728856814288572033,\n            3123694825428833189943974730387937552931713004458396242443840668462184834558,\n            3432192610292569155696646287493678963086402014898209278361624573082188247990,\n            12349833666000936285363634772178969342930188247085371717039135170012686159900,\n            5587426338437935681688079936152042996259869611071713486439341129143155921959,\n            12022589354168680516901928073724404259700970836413687340697868887207353139344,\n            2351613311284811919248989036726852289804810348516261915606564943623124473717\n        ],\n        [\n            15740655435463241944594855735935231648684671883923953096410588018036769516770,\n            12964751171177929169670182425240761498461607040020835118601467328036987558858,\n            21474571159868965455306627669334290549452576803823591301731326342326814568896,\n            6954370193053655486251406740905618458518953022289151868757271522548301919472,\n            3115002343037487520580459802807906562630507097436525958861415456096559884443,\n            11775142132959919266954507317832500578453517368862270948538792702813845219681,\n            5975456097652384580746132945351678665917860606511206167023154005883554813508,\n            10958037207675554032315788914627312943186758288936582678633536154169678007202,\n            16345185674805541466042568997276776714209785989761944600635051035243995431568,\n            3326264593228494909568322793066180033820330146744162800569972963329142251537,\n            20721047231464194965879320004420846916587593568519526251056516572985788552732,\n            2552439778142862614309289213707433798337671284267429041900242151271508522517,\n            2849386127826497959217687777221941766595094589431869464564268817450132435018,\n            12188539304210779665491473755999603070354632830707125660270270405780470402800\n        ],\n        [\n            16239592155161765109648123193105804251252701943901733499502441663333912783245,\n            18702593988046837524790351483331632258278160532977261915119611324471253407466,\n            13746033878407070858115621843430829498309218839316343379025665907999784574154,\n            19358066347678636498093783612000296194480758342913325289131948678991962529441,\n            6024976123298004874848602709755399197808739071863728225378332097920450236516,\n            11108084608972457539770160222798307153256767409158349747526974841008717682367,\n            3009127146923662343754766534488769100730310563110562565512507605403185571089,\n            10560679284132950437595738585637379866590755950272794729013445350206405316661,\n            16015321530803994569819047219560485624444041236327101681073970215458831987478,\n            18489840631710745699731219026737904723160484479846032199737023956049067434815,\n            609265187318362115240245160721406765003010398230819869810290394123140807290,\n            2656965952206569220410287839949134856874352189248192147930831679380007159249,\n            13957423432693450118120092425077530751840166358932317773385901323790404449641,\n            7610225795517710715985874151201119876406845575780133396869144717381641586640\n        ],\n        [\n            6482921272760726478838066628157548923897782117283646773208763176771446379138,\n            4562585331778730670899179927104513856322577370213643119870201750008533040214,\n            9299549824594530154451155704400285409056448609359755927574262701418672785771,\n            16654459784024455427280229763380300423080811024668332509526284511491790880990,\n            18178936861568428015361893654874798233785855995042899944660014774323534883903,\n            534506139369949013962728832141783820104682340925384016906020027968881380951,\n            13888044772855561714276444972404100722751042044045312252045340354941233320135,\n            13061437363756343100054622876229104455920015737970195589611281743974716159827,\n            15297052669271818809266618537917704542138894789392864971735934945598379827363,\n            3240592020743113440365790241401792477958041186219702004441781545015089517479,\n            12939402739160799630996576545137073878726141216092557580496570401396343874133,\n            409838859583542828209958035048329036930557790097408442597169497017958367880,\n            4849352055719384218783567790347020036570406423962447054960403165168624679411,\n            10140481868950825952506002812679553069445144019364683137830173127833535162812\n        ],\n        [\n            4169753203433043290708949478342499350225971996935208104044673971132510531963,\n            16198597482473356107060462797493408464959815651823410647378959304462364790023,\n            17831214733154720272879709021886998538183166751338990495293296921834561417050,\n            15996002991058741836925286413107190453488985346498046642177496721490001022163,\n            12128929995926069335150064696726717100038806543084523729572253928762150006902,\n            1527343541447603983494013575570118174442170324803005341835852970207664984106,\n            3864366504647042739453971869413719136218296278515580744588126485271535533745,\n            16390744785373846505589339019032992526980013169808686005019244934399314954484,\n            1189371614834081242339044631966546656514169937037419744085755746584992776112,\n            2490564128297998291899011962907372091056992851367564813460897014374926950158,\n            2632864541439030478006092584387470079076010621748787710053145987733131826177,\n            10997016251008884590554668186933912000821350188750456144761529496433221911191,\n            3662989402605074726032541754492900291134797145446056852785520146936851543244,\n            8371074929323402425468930212402691638137013802793901226648986870188378349904\n        ],\n        [\n            17920452210119585965813298538098997746450528307627971419517604274103840658730,\n            8026613233416032931155189579997899527124867847165186585887532521124762242171,\n            12536429843060624487053183271774959575059067729019923970247266906616071589989,\n            18354222295715868456732739635697044486544782691576216892030243636076554800619,\n            11685593308965088606881675161829854229906033467171784802160080423031157953626,\n            18989841286028554273231159314070667749621876499337485447347239057791285949659,\n            13501500842653069022700095920888317808542113497043735775280862312089436522286,\n            16284422417487952110266526583186344607656490299306406671512902584454645262294,\n            14766820041476554952520399418749355774195705334216487399328042021346008099854,\n            11502099463338241997177160748027482497157165595330950109059924501733819344412,\n            21097733162892834226328090737666232905549661288100963226189626007151883115218,\n            3620141777236347892405766912767968106066233413607983266884777435591408542679,\n            4465316625088681267432956930147995293521314127558426510839100849580054135068,\n            15951396696291486543574989938200386934444721629903447106494532971713975302198\n        ],\n        [\n            21420692366857794685888663542888709905237738746850069466081467001353666342965,\n            18343503004862189418033094393114515169584171574852422315350418500159030922263,\n            16439186901063853414808045554962977634854311593865750348846556486836509716488,\n            15200551988732901161699976788357951085426436066677048420098461828563894176150,\n            15140772590596966074591171894694986645347795546765667852915300358255369432294,\n            7383386342436648909729802223228006548918015494414484659175617833341830753463,\n            11436445698241305906567677067532324081573492145508451249291326304016376374466,\n            17397405229027848655285535331264669055168427730382628461971653096729174692794,\n            8888190346365862431131132945799487885295183925892581338098808269532220115208,\n            17373048493258440814074078107890527278667903472831731635546171123117085702144,\n            5394355195223713516914582580686192473163629785306318732489822694588538915692,\n            20814957740385525027786677509245187599649792998372465800981035312224123940783,\n            11167741662268878371451552983943563550747492198375641214347145843414778750740,\n            1505498991925224080559736158020686494389967648228591899080542175743913505975\n        ],\n        [\n            8482807834840099486107357849095958421708288941420679407730439668240369271197,\n            1531932691795154082010331247272128035283420450879984505970978649526303671013,\n            10326017741190716069982105202291613302347042236075737537452333444753171570010,\n            2890563104449202149521252385842115871596603958515320789619311677428773944295,\n            5091938011714608365574587822261119297677309310900626302766934784886036216676,\n            18792973255357094538588824962661759194320829424712347846315600994520652609459,\n            5819484726278895533547092474664732368175576227992878488267454637556311136768,\n            14087278759052154922504944654932471722205352537489748711235261956958139094423,\n            6676755499836944199268283133886528716777488598645051771936175647684814488319,\n            7841200200792172536039490995922340397104113825218911994623753022413575084536,\n            9685171750835271647846188024034904289604883281120913275229696726161494108338,\n            13804722593058778047599265964893015518608567919815229008355552695901539135617,\n            133210224564739370698401112580329091433152068231765294734991529050629411851,\n            6253365067148837443745536970484493754157158998156041417978340186561909915882\n        ],\n        [\n            6379626794062388565530320965673584683811331210463512233691169393056454417810,\n            8031021217500376290269114216814836477415391402921787637085737712949651005952,\n            15261959534341262089656432084966075417921918036565394975811438856221288978192,\n            12412675319987657724460960278402203548317535126494687402198671892291826563464,\n            11594484527416994136900781664743660516883697944736099448760569480817952218099,\n            5525949004768282420418522754788387377346850869414250693501350383184014395566,\n            13423677678153887686951876961584096043047689175638209759158420018856273430250,\n            688554022717474500337948897714325469989973507431329797109415877246281679190,\n            5767985312159947447966233995178318554138266544591427341210101818005833690773,\n            13782057493439290506357575012457041256926849070794382612465582256292384507590,\n            2009465632383454183075946487099156558696455704620200103263777377956167571948,\n            10265570962161934109202420603055144010322859077969741656080416572925588897009,\n            13063467510206676485181697613068184940643350938488359709447602318070297992418,\n            8824580488237789516855671915345935747743201560548603121129517348234754630838\n        ],\n        [\n            18405974527641184935569939050199806786119735189423462681352004154947586987761,\n            11063658239692825381704700810385108349384459703800229121613802621026834850995,\n            20401912636755055463157317129314482008782101856095804626717136888886428939725,\n            10581036997862130058603889786198200057133900928078268413900852134308841628552,\n            15613862437263830065893280422700893831122147824370200118126675792748158214283,\n            11637898091445829201992956909089879348463617460955895182594618572267100421779,\n            676470684249461112964281503193041675013396554434239929609436328672155420783,\n            14862758280768060051884504554805186980208629806423451755599092137651959992706,\n            5623342967419780942118234966618900971275224510117264341831041912523393680166,\n            12293742687505619727765346377361630310803471543338450439759434637239250426631,\n            17107107724389526013252251054585363312805578717860151655674796329456502453436,\n            695490429984933474058785653390434166254929169748519672533632124843844650437,\n            7941603993861390710630117468483386570984050378175531457457840811645822985465,\n            19423663035279971057851778008344970269742436279020301703706239058210708410668\n        ],\n        [\n            2844460676842285471844840162496739784337096369846435331204280645139535043731,\n            5914749649291606384462747717764850940787906745751128721215181537027495043325,\n            16403998562201315274383761287898474039980386929670468025842124690312505385798,\n            16679714051449621657256662882211432986285335589270632187081448168743144646010,\n            14178974435133537452754432783693851994073934244854394772136599698341675338748,\n            14490318493007296294817313593753116388501252549516359980240258503496717340194,\n            21219478166573360512901478467779541318881953172337799756939010190701884653821,\n            13653038712207413996195005796658436532811211815454701512198612316602372800026,\n            6606031466185873676955137126631780808678269492505994174970319773811652852017,\n            6998326006251734945119834407770954155028321677085545151592873301468610324946,\n            15717984973502827230694305820570642040862757036680118080574899662027439132392,\n            6129387663611887185666499162725019000386957238200546358846681873950634080364,\n            3229894653990057163047872622628926092609943988699832798310941005306795398260,\n            1577249093608064810495237122250056987651980088410811739655744853476971398741\n        ],\n        [\n            8019490235657930229602545685025618469913840887375206662306714562639338096359,\n            6360514614281299182411878013125972206098844277909449064382248671632240409416,\n            18532505668867290379738328175003759079607042632729982459107375168365918757976,\n            8421518624327767035539667378193845962377888010421324291966623261409058898245,\n            21508024236353721936402111331734487542417525255582275314005272967405040862839,\n            18027689383014810715963711252886295463940938266456411644747464137365500951807,\n            14484077699638992615220759300878276902226958277985946809174186953862915299590,\n            4817080763362108602919187869554992685382108795016276838137423588157592666796,\n            10791657063117982548380087239678382293931165307389242284595466175088416832331,\n            17574587559710800088797913763598808892829608388483075257576879500511250128297,\n            20931338330271163055101602391315623325223860904427973201832184784566097488773,\n            1954574324880132355431783868495392698894997264747376529310223470792870288803,\n            2551137710278149502571112114560159376697849893483916552857521579500208583200,\n            3997814265160290573081282672183091638735659350920634229735367532175023689675\n        ],\n        [\n            20759074837657564809501685143530456377562536015816086555379080667602653298306,\n            11573288866341175121647407708978273297857024597782918874282176717371576773130,\n            19475107603336226504587469711392819869087288902355805230614724291289122375846,\n            21884242265301052283286073107133504985083194336113478618838523331660374213570,\n            11844625750737259417493690805104254337758743574820507915512371579679338049474,\n            18479163117067129250021591308069049721232170743585134941796617403156042279597,\n            4434911559893931929914698652677389633068778061297646529129767359157675249407,\n            316682746098441691626372255125560321251096997722401729182940832349927288255,\n            19610390525670030492896894087745165507340241783776573708027658938288182681300,\n            5840208148535790468526125686220196099566194081164771919666034943299219873755,\n            3679027218793663842409677356801552901605408436635647286999251784339864591201,\n            9878321578558671609403512127325051261043472923444011356477587484000484178928,\n            16646455734597629493777237097088292344110223995728568379569260368267096014288,\n            14735311379463771264009437608444808852233202023120148855228542005281236140064\n        ],\n        [\n            3066170574229466435407264700502616839626082070514501523679452764935485028736,\n            7951387307333182634684754650901435973768779794218900331714625086350726274942,\n            13578824606544430966133042087468301830727811282121948825028360301706303669231,\n            19848381031896652139349791682530465833719275685855743122849792015759588531339,\n            6922136549797750291447751953663854475218048098902194660515442295348938322083,\n            10287261443878564608994021014993200221021609196127927226041534661185500281120,\n            6329063805909277980282354325384845982783657973381777424581891744521604640994,\n            11017548748010510224711773916683171526878158646735796493859902304094594577338,\n            7338335804036221772945379382782674399589206056354184002757176151341198318122,\n            16538115574966264108203522400275571374556020887608210819563613080068710593180,\n            5138245976626127736555381649425906350640183768145541963359703291501245587848,\n            11347291457433539838423910567581114929056891897670787919546976342310334767900,\n            16731418617609356258989018213857655050257827940403117452476763890174877962606,\n            5300557287595854140445529914668848275536281916366261035684431572728600543772\n        ],\n        [\n            6573154341426354993599623914164155921131813615298607946435982334364383320793,\n            16419308144058642981524756443290703631729426627385646905142158478345164404879,\n            942314767315789144256266064192022265579304275774793342260835421710673918285,\n            17945712678641984649495876620223190782305382105763957622870181201252059717682,\n            6497446328454795535775520142893202697197882656922991300092165933292014766725,\n            4597431274747983679157649737399090093759447324935531801532881928263496852124,\n            20581664438782214735167492264807215952133504025063870863776714994387749970180,\n            5854805250432620287068939301087113989827350315462338534819773170350910225622,\n            13548539273975522227017059057161374261181128673406746320122994151943985128196,\n            7414800418339434590171697383031637744601564309993253226498272110927128779715,\n            1052987139013233499761917411027037646861657729931697227519754049539833189269,\n            657108667626796780066815408290681939596246857020023912757838581820942772606,\n            19088282520683145597098955555305422198780142332183007920340899996970202127885,\n            12616611543293706969401642310383814806112402432261338062963427055972449363741\n        ],\n        [\n            9271002136483424788269278316391606491360153732024211579417926107994995432826,\n            8228171988949250866347662896961764196608750080646539001443256474901139877051,\n            20240081759615964816136232877050251456333669788276947762731625798225823502998,\n            3685474186777860155223706676482968796090983045736466861690878558020083034916,\n            305741399293956298249448376598537769086716682101868856634885453070917344627,\n            14942830908704142867090451021371809832404069532430585621173997534136021340349,\n            11873341523902185373029537495825388400298468809112431373607438726587086076801,\n            16566421774425889929886838459987430622148040878072136298073788804726016806526,\n            18314173705630320437871113612645566255775444265992974192826331109357704470403,\n            8597072000455186494551694692524831407069966911367008568012412188890924300508,\n            12713907619301764178052509321657058919935892208409394514649600000706175319189,\n            14893305145776480356274920935320977108910444566603040558476174175562031483300,\n            11027938853766719633497710751595847377263279173227878474215846011660771149283,\n            6927793728403485743741891409676155921703126599118383623637742555953569891357\n        ],\n        [\n            275116175553159498718561489405169511232715998055900506709208190227728439831,\n            7338708370982730261395030177227912514214944721567888714384503728042214055309,\n            2285508597732647746841213906783440647997136124356359059650028586535477309792,\n            15163443940499746648640851269666923560658903809778640616581862089179343108182,\n            37868753390676617287004841173348795594362354905038492583057282228528019603,\n            19475937072595290694509025801956972632863465524774747773770243946674956142538,\n            1818532521520079200500527816308109106767855745862413136331026404438772138114,\n            7893556755641665136576228990240239515272703124353568551151593029797349984766,\n            21843411659343488969197036446870567462789014279182131087406329675847260538394,\n            13883536936296384480685931731174096875043607202415233199362935327975006076376,\n            3061885619227488514362869971925298711535995206671454426027635264218303442708,\n            18477632669759047471715211461337808302603089797347923153039515976242018999984,\n            4953684980989921770137053964305439167945572062294709110871332076115076441738,\n            849590699713478394267684876803414882497887483062076673282369901261463387635\n        ],\n        [\n            7481617454708320190331411214970150566519243590120906863698168124347483283307,\n            3790897889674729687102011235738708037383393765058266352188381434189575086080,\n            17582850308142585333519054672998882111865339708436809129995518706804527076353,\n            18961585057625546222763334757505522771740769338010572292783220912986926586854,\n            17761332237343741278668998123360108574589045018570742689473320560784505694171,\n            2985768806786881176362869973473950745997650698247163897069614623128281191971,\n            14099532828736062687388547070054719462342298981811592749594569670955512096417,\n            11038429458121896617356666499000022639824993159854464409767840206807807728043,\n            7092464867594165410092487979619486929166817679669939558999555261465867685619,\n            20690943609696626243672018055336898909740557628366317533030490341400911534771,\n            11468803355345327303851639215186997122074583511720489615730106184659306943551,\n            9723340381470060111632263437706139036358918795037011403763820908081655273682,\n            15929497108714526572140462634902391796285476840034863688822264979709196730555,\n            10556139316790113226399166507094772235069235781001645893008903131855134732783\n        ],\n        [\n            9679690373149117563754317307037586538394929348733117229177073999196519450461,\n            13953490152873041611053779700802518995304489998104548903919774028525032867964,\n            8584860336778813488021026261425560177968889952950706471574873674510806966419,\n            8400619522468195192079024924375785176686244213372269992523849676384018875300,\n            16018239095599670975582212156736908990475077583136160880304021421989907078233,\n            13442762142079759258078337448325782252795445513077684243558458356586404542166,\n            8012524517439221218249889438165569497775551565363444399021079689755695756644,\n            18993442931337392722189844722480176040693468853419121807183123246184718322422,\n            3920077716342530896195446297162279477088824676672184510151991496745985467962,\n            5663885918690734602622426696143772526257235018784490039324179199552252272203,\n            11007942216549411481832816505096362871539130535791764225892613523847180067807,\n            12333277086717649179464584335417603775633093807601488202185840108448843332123,\n            18845646001611639216437777320622198530894193094859924604338859788769244491906,\n            4365664869724113934112630479809518948808449158812862195377335314227128146059\n        ],\n        [\n            1895928299034844696630794694609519515092896092191683631304721647222032914779,\n            19026513891744713045426845531420132126578554294461150386909840193098440147673,\n            4073281111734161932072345995811001896063226222777392994725894652964051683943,\n            13362867147840304033834065229457670563442204439046527165143934160967798444725,\n            9724485076061228092177286932258189815958450833155679889060988975712535081230,\n            1627333086421877964064603957348348763696708139082607562629629725119997724989,\n            15641874381988682075545920458678901707167602315586561132909307694310257446023,\n            11034182059786563285109970430313289917032071817373248775707546493147901388113,\n            19299574745226772810381056007321573284793444116746272581694295128392282602507,\n            6482638271546132546782310681506292669989505915370438641175376336582811537739,\n            5515138970831679245126906315331906152285174207704247085730757090763031968272,\n            5476746571008230667726688443817396210804752373221945489797046634505665572661,\n            7666694240010574980777401583687953099995588711474009270339615112182231942529,\n            5345423812126487230177352826531606752132805611025916574123407915411930666385\n        ],\n        [\n            7211419275788152379372992549185439317698375419836488104253705518694042119228,\n            9112140750806762434510825375931543886135367141484613422947675423683311130537,\n            12020406779776320543918475257645763209221278449775176154727249143619468329590,\n            6961266423823329910790066424248133365666435921221127260870444632539329606224,\n            3527954161191330198309290076708590175518992377857531220243324230315686986882,\n            4506493800007416260514839382433205292331764028735360433653631210611507932973,\n            5530043493028748853396066194331787195114268917530734310055878976603589658986,\n            6225101949608434111198442012357272827532649788667254718474232856896193900534,\n            18857681750145313162493356993928966938826030906289025101399379263672964054354,\n            869004496821135911657110194622810910776043851317139916414752924319830673140,\n            1563829187789877652048924285544523323087888587074484491222967490033068091506,\n            3746011388196035005128740753677692387874351474501361202463946309770129429478,\n            8923361680602360491637539340186330583808472610027697444204036893010926051377,\n            17386658730777389148551542774423634880430074554050371095211396948875032586750\n        ],\n        [\n            18803497674827878184210135371703804206276128582022416604041787392310845729622,\n            6590008305704976915857671866558706505394630312395969823040635040879201337002,\n            2714759247406808259589803854440914533632699567907406761316959511568030744066,\n            16299600292583383998706243035294548578562168326056377699804434906128380481545,\n            18030052417377603682453955579175094175373404791176719861146533099419481910116,\n            8281176924556272137773300347187527516223668703826908452855802099328657344885,\n            11849913964821118293258226409033507680960291656604016015128854810099746642358,\n            2718653438901851962181612429288634518502998150085578586248082443515454453331,\n            17998120665039026798317726060462551095622279047136565816648549826384179735803,\n            5133986071087432716437635164720916024596119526725252628340805179596147643344,\n            10436725621240227608920674037516192343160590540839553356331196590007025190330,\n            15618861474705274368161439159831328775613537777134266634959100526889759124590,\n            2511040106219966488942941427805413210834998861588095124665874406004322450915,\n            9256734357641210393451356199893573129989430877284906007481196262323584132500\n        ],\n        [\n            9325238625126515763679853550553375879158552597544709459784109512243397955590,\n            8484194759795978556088297437107686617328133596604796277228418191688537911573,\n            7354463117736585470843139230227589188304331389476818932256765377140053168035,\n            13482530129860761195447497269660263095272961608736579417124458190809007451755,\n            14565877561081097978808851096191380459292726072163754601747539666057949167693,\n            2135718143241813932226161801358235289781058013695871838383051572102928884567,\n            20522747851108608773003772892187458826390403588440155512773881116135635256410,\n            11218511591600821722003994140994121719832310771637604152054113941332818455369,\n            16404237709834224719800904205708261378663612035126521203425485585484994986837,\n            3167586669955731698085513002461997957955073343333183557668566807567186590619,\n            12910675356590890481798719900077391291951346627685199305549632303581651173802,\n            20462953503625657093808736208830478011818679863351201550868889073055617578896,\n            18947108562530644410102590841857357185115081182319111952079371871969663671988,\n            6652719222291337824561052377450295064566587460338214284424446330320206208978\n        ],\n        [\n            7333723286812204168407439917521565157977670700382476881790986792115201279410,\n            21462572925415337738214437933606587540653694853107274549824898449394152530908,\n            6820993392268884858152757378169835647522978080101384568523885945756789014349,\n            16253055713127198337468919465234896268161918860396508551871391729457324125212,\n            10110377608880446364161064735161091842938826397512230713135002732708361876777,\n            6013899729219769410326935661934883558337463050053435907100782150692294649745,\n            18208889227209298598015138525374980382541030144328510393048300775270787949840,\n            15191444075449840811990314906356975059662539527217455842253932605838538105879,\n            19203188682890514423320800755662084436821947463936810212920115637567986869322,\n            3424855308164288636262956984024538145687254883958282264766019244372264927134,\n            19586353501601321585672146098476085745700368665390426128801697725086439710122,\n            15010004828387861046033155948517332272437733117418549079342100218646019702080,\n            13686339229559293872534012092085760944059315023471369613822812965287369238447,\n            3695584012986626869153168308549979767804807828687034680677188403817830418810\n        ],\n        [\n            11102327427527201346056529148642207216130990405495165914761901542247835149412,\n            17544563341965869668707473190805417639220912289969746146554006791986582724590,\n            4470848226757772603246285686584200798638888970547659211297578619392420918858,\n            4999887962989142396481351641254451370620928952306237803174890583736074770292,\n            18696621645163318552472841991871104820660024833640321869898695219244792544787,\n            16940838088709411711968888146075539661653566927745755478421474505108166140656,\n            11530916114120676768574532193664705720045810431665651204245333670674998923676,\n            7355883923626920336916662475522243088902821161113628716197989160163721774248,\n            11855011297239142909723378707832446926509921514737098047687587969894126468497,\n            14942813403879667533705178220673159254886774089783887482228941707848831481300,\n            12982663140753853847528768000921561826340636419307931766400467366396846035169,\n            7171806600323437636744282845777660095738436086868856062406225133619265520575,\n            15982491779929281894294451486893882850583039973528579274058985191703359466543,\n            19910319651211685401050894240685395121165652955380089146603485967076493605680\n        ],\n        [\n            5314337765479745092537090978913989310916802510812096192767666377841447850226,\n            19811002121850954821192061183148615163420706271800817927960207430256612524059,\n            18254735365473444026840717290492248863101576601864757410600437101587001057517,\n            3428844080448214358238191483671878854080864964895729401025193865570307658787,\n            17688699129722255312471132988267997472426043097741089176095207368928695347323,\n            4698778325800416923484519718058460264124242609977080857699400967590134848728,\n            11905991584861721837480962390330989450197421918781662074678555052926188909272,\n            11195321655863853696452219195252788379254952714823481930861848719672010792417,\n            7364573423043519994861038175593500896079924196888521130462378149111415036167,\n            8488161531239994007634631892382512438657593769374020273048837520623507271908,\n            10948897450624334536526533930990935852623955696383743452358741253735922067160,\n            7654175296077985337834288232610181411799310934515705881481549241949669590123,\n            2456818423512317060112219756429819064402183920202453945509918337536940292593,\n            10561627566351771351550703479997725668661012955063201536370060753602302262655\n        ],\n        [\n            4310089243116651250383251477034324245457116277666484671624575402227833925755,\n            11882651094700172542567008359015417490389070633573140242127755563781024148099,\n            9304328383406369649010049197573360507944684656613297568584394172735340111263,\n            18874624159090765871635243875933482675871258293088886749847315202391523956097,\n            21295163659036117126535933666532228255134275601226122998452204301238438701469,\n            12010652807420347304532358791037860496459429689113682253200903987591679627067,\n            16035147304145989851106586435462674695447030608653337914734493255503105122271,\n            9396862051344040260236487045030117425080665841603826234795752404308634565281,\n            9623434193020540057685957851610556657916120473978726845338192370747426064401,\n            20738972702824723087864078264786214906718601061526079118500228332898388551221,\n            457108501000029082366810998923133233303603111079376685755578228260824733356,\n            13918719735797746251051948238671198059940858851588937008268023917020073366433,\n            19519317439483352367895890468095276150233498159453735432212409926941855183358,\n            8400170000010792082337905010575114377571921640630709589910201278654198179035\n        ],\n        [\n            9476241965146735006848999585927664857836027675817848342111996150638876938940,\n            20383112265143113621158547584533108172173014612497300318772355462448750327634,\n            10370498046215116715134085566322498900073301617448752966999679321197451973184,\n            20733082136685384602293372077980283048183069753990343452404863587763569081917,\n            209896847902324756441033880218169809685412620378498856437573937154846479551,\n            19434208870058033389225349051527401299247475125763108527095891214558119617655,\n            4154375339831547300427516624109559852426973786711444825735879648391004291098,\n            2168897082728012692838287354581700563166925732559863316849698306675591131396,\n            3690054103601385333490512469861728231387681704127049683413276534001532261943,\n            3997073653940540957268729302105309759820513901669570962308110503858257659002,\n            1493108383089723041516694658460301260449183718295935886883417227290045091286,\n            1479721274324005701970059663387618978577823761358404739977258141309872068056,\n            20291086357406391640638647514048720424247838755446061571102712546958076851767,\n            6860718845648137601753080432837091439893783461195961430761483584544410630099\n        ],\n        [\n            7929983584961755765377471515178883367433439212271736050025708429355823243624,\n            10728358412340769313351519567620170787387770135423141966436844748162218854008,\n            4169855297038740915695363102363044976292665711211255871324667594694964037773,\n            2424224908982307794171893487036131370038399449016750026546326391873466118335,\n            1265438250797513961458031163301351393237543067943565114202366151377865506872,\n            11342865295714982458109220575532930834959120923837779800176462280225501198217,\n            10415384677581396651184780193811022815145977389536746022901590915883889609878,\n            5311187015233522007413118391261106264838418369874755037462489089469638365756,\n            7499079368996193403750547553190134606728655877653629403923945654291953825315,\n            1743769713774086589463238504150542785039161133276706463569974209707667651575,\n            5792276842105452143354445764064878932177699791644537942211472215636738768211,\n            9443070058088199873709166495831389298947366881168483562080569357428781583046,\n            14451507664847323254023899990839043037382802537389529773382951366995420730648,\n            7633550475637360595097128986678209600092185294414596687526062925070686318486\n        ]\n    ];\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(\n        uint[2] calldata _pA,\n        uint[2][2] calldata _pB,\n        uint[2] calldata _pC,\n        uint[4] calldata _pubSignals,\n        uint merkleTreeDepth\n    ) external view returns (bool) {\n        uint[14] memory _vkPoints = VK_POINTS[merkleTreeDepth - 1];\n\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, r)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem, vkPoints) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, mload(add(vkPoints, 128)))\n                mstore(add(_pVk, 32), mload(add(vkPoints, 160)))\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, mload(add(vkPoints, 192)), mload(add(vkPoints, 224)), calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 256)),\n                    mload(add(vkPoints, 288)),\n                    calldataload(add(pubSignals, 32))\n                )\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 320)),\n                    mload(add(vkPoints, 352)),\n                    calldataload(add(pubSignals, 64))\n                )\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 384)),\n                    mload(add(vkPoints, 416)),\n                    calldataload(add(pubSignals, 96))\n                )\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), mload(vkPoints))\n                mstore(add(_pPairing, 672), mload(add(vkPoints, 32)))\n                mstore(add(_pPairing, 704), mload(add(vkPoints, 64)))\n                mstore(add(_pPairing, 736), mload(add(vkPoints, 96)))\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem, _vkPoints)\n\n            mstore(0, isValid)\n            return(0, 0x20)\n        }\n    }\n}\n"
    },
    "@semaphore-protocol/contracts/interfaces/ISemaphore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/// @title Semaphore contract interface.\ninterface ISemaphore {\n    error Semaphore__GroupHasNoMembers();\n    error Semaphore__MerkleTreeDepthIsNotSupported();\n    error Semaphore__MerkleTreeRootIsExpired();\n    error Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\n    error Semaphore__YouAreUsingTheSameNullifierTwice();\n    error Semaphore__InvalidProof();\n\n    /// It defines all the group parameters used by Semaphore.sol.\n    struct Group {\n        uint256 merkleTreeDuration;\n        mapping(uint256 => uint256) merkleRootCreationDates;\n        mapping(uint256 => bool) nullifiers;\n    }\n\n    /// It defines all the Semaphore proof parameters used by Semaphore.sol.\n    struct SemaphoreProof {\n        uint256 merkleTreeDepth;\n        uint256 merkleTreeRoot;\n        uint256 nullifier;\n        uint256 message;\n        uint256 scope;\n        uint256[8] points;\n    }\n\n    /// @dev Event emitted when the Merkle tree duration of a group is updated.\n    /// @param groupId: Id of the group.\n    /// @param oldMerkleTreeDuration: Old Merkle tree duration of the group.\n    /// @param newMerkleTreeDuration: New Merkle tree duration of the group.\n    event GroupMerkleTreeDurationUpdated(\n        uint256 indexed groupId,\n        uint256 oldMerkleTreeDuration,\n        uint256 newMerkleTreeDuration\n    );\n\n    /// @dev Event emitted when a Semaphore proof is validated.\n    /// @param groupId: Id of the group.\n    /// @param merkleTreeDepth: Depth of the Merkle tree.\n    /// @param merkleTreeRoot: Root of the Merkle tree.\n    /// @param nullifier: Nullifier.\n    /// @param message: Semaphore message.\n    /// @param scope: Scope.\n    /// @param points: Zero-knowledge points.\n    event ProofValidated(\n        uint256 indexed groupId,\n        uint256 merkleTreeDepth,\n        uint256 indexed merkleTreeRoot,\n        uint256 nullifier,\n        uint256 message,\n        uint256 indexed scope,\n        uint256[8] points\n    );\n\n    /// @dev Returns the current value of the group counter.\n    /// @return The current group counter value.\n    function groupCounter() external view returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup() external returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup(address admin) external returns (uint256);\n\n    /// @dev It creates a group with a custom Merkle tree duration.\n    /// @param admin: Admin of the group. It can be an Ethereum account or a smart contract.\n    /// @param merkleTreeDuration: Merkle tree duration.\n    /// @return Id of the group.\n    function createGroup(address admin, uint256 merkleTreeDuration) external returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_updateGroupAdmin}.\n    function updateGroupAdmin(uint256 groupId, address newAdmin) external;\n\n    /// @dev See {SemaphoreGroups-_acceptGroupAdmin}.\n    function acceptGroupAdmin(uint256 groupId) external;\n\n    /// @dev Updates the group Merkle tree duration.\n    /// @param groupId: Id of the group.\n    /// @param newMerkleTreeDuration: New Merkle tree duration.\n    function updateGroupMerkleTreeDuration(uint256 groupId, uint256 newMerkleTreeDuration) external;\n\n    /// @dev See {SemaphoreGroups-_addMember}.\n    function addMember(uint256 groupId, uint256 identityCommitment) external;\n\n    /// @dev See {SemaphoreGroups-_addMembers}.\n    function addMembers(uint256 groupId, uint256[] calldata identityCommitments) external;\n\n    /// @dev See {SemaphoreGroups-_updateMember}.\n    function updateMember(\n        uint256 groupId,\n        uint256 oldIdentityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external;\n\n    /// @dev See {SemaphoreGroups-_removeMember}.\n    function removeMember(uint256 groupId, uint256 identityCommitment, uint256[] calldata merkleProofSiblings) external;\n\n    /// @dev Saves the nullifier hash to prevent double signaling and emits an event\n    /// if the zero-knowledge proof is valid.\n    /// @param groupId: Id of the group.\n    /// @param proof: Semaphore zero-knowledge proof.\n    function validateProof(uint256 groupId, SemaphoreProof calldata proof) external;\n\n    /// @dev Verifies a zero-knowledge proof by returning true or false.\n    /// @param groupId: Id of the group.\n    /// @param proof: Semaphore zero-knowledge proof.\n    function verifyProof(uint256 groupId, SemaphoreProof calldata proof) external view returns (bool);\n}\n"
    },
    "@semaphore-protocol/contracts/interfaces/ISemaphoreGroups.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/// @title SemaphoreGroups contract interface.\ninterface ISemaphoreGroups {\n    error Semaphore__GroupDoesNotExist();\n    error Semaphore__CallerIsNotTheGroupAdmin();\n    error Semaphore__CallerIsNotThePendingGroupAdmin();\n\n    /// @dev Event emitted when a new group is created.\n    /// @param groupId: Id of the group.\n    event GroupCreated(uint256 indexed groupId);\n\n    /// @dev Event emitted when a new admin is assigned to a group.\n    /// @param groupId: Id of the group.\n    /// @param oldAdmin: Old admin of the group.\n    /// @param newAdmin: New admin of the group.\n    event GroupAdminUpdated(uint256 indexed groupId, address indexed oldAdmin, address indexed newAdmin);\n\n    /// @dev Event emitted when a group admin is being updated.\n    /// @param groupId: Id of the group.\n    /// @param oldAdmin: Old admin of the group.\n    /// @param newAdmin: New admin of the group.\n    event GroupAdminPending(uint256 indexed groupId, address indexed oldAdmin, address indexed newAdmin);\n\n    /// @dev Event emitted when a new identity commitment is added.\n    /// @param groupId: Group id of the group.\n    /// @param index: Merkle tree leaf index.\n    /// @param identityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberAdded(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Event emitted when many identity commitments are added at the same time.\n    /// @param groupId: Group id of the group.\n    /// @param startIndex: Index of the first element of the new identity commitments in the merkle tree.\n    /// @param identityCommitments: The new identity commitments.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MembersAdded(\n        uint256 indexed groupId,\n        uint256 startIndex,\n        uint256[] identityCommitments,\n        uint256 merkleTreeRoot\n    );\n\n    /// @dev Event emitted when an identity commitment is updated.\n    /// @param groupId: Group id of the group.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberUpdated(\n        uint256 indexed groupId,\n        uint256 index,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256 merkleTreeRoot\n    );\n\n    /// @dev Event emitted when a new identity commitment is removed.\n    /// @param groupId: Group id of the group.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberRemoved(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Returns the address of the group admin. The group admin can be an Ethereum account or a smart contract.\n    /// @param groupId: Id of the group.\n    /// @return Address of the group admin.\n    function getGroupAdmin(uint256 groupId) external view returns (address);\n\n    /// @dev Returns true if a member exists in a group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Identity commitment.\n    /// @return True if the member exists, false otherwise.\n    function hasMember(uint256 groupId, uint256 identityCommitment) external view returns (bool);\n\n    /// @dev Returns the index of a member.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Identity commitment.\n    /// @return Index of member.\n    function indexOf(uint256 groupId, uint256 identityCommitment) external view returns (uint256);\n\n    /// @dev Returns the last root hash of a group.\n    /// @param groupId: Id of the group.\n    /// @return Root hash of the group.\n    function getMerkleTreeRoot(uint256 groupId) external view returns (uint256);\n\n    /// @dev Returns the depth of the tree of a group.\n    /// @param groupId: Id of the group.\n    /// @return Depth of the group tree.\n    function getMerkleTreeDepth(uint256 groupId) external view returns (uint256);\n\n    /// @dev Returns the number of tree leaves of a group.\n    /// @param groupId: Id of the group.\n    /// @return Number of tree leaves.\n    function getMerkleTreeSize(uint256 groupId) external view returns (uint256);\n}\n"
    },
    "@semaphore-protocol/contracts/interfaces/ISemaphoreVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/// @title SemaphoreVerifier contract interface.\ninterface ISemaphoreVerifier {\n    /// @dev Returns true if the proof was successfully verified.\n    /// @param _pA: Point A.\n    /// @param _pB: Point B.\n    /// @param _pC: Point C.\n    /// @param _pubSignals: Public signals.\n    /// @param merkleTreeDepth: Merkle tree depth.\n    /// @return True if the proof was successfully verified, false otherwise.\n    function verifyProof(\n        uint[2] calldata _pA,\n        uint[2][2] calldata _pB,\n        uint[2] calldata _pC,\n        uint[4] calldata _pubSignals,\n        uint merkleTreeDepth\n    ) external view returns (bool);\n}\n"
    },
    "@semaphore-protocol/contracts/Semaphore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {ISemaphore} from \"./interfaces/ISemaphore.sol\";\nimport {ISemaphoreVerifier} from \"./interfaces/ISemaphoreVerifier.sol\";\nimport {SemaphoreGroups} from \"./base/SemaphoreGroups.sol\";\nimport {MIN_DEPTH, MAX_DEPTH} from \"./base/Constants.sol\";\n\n/// @title Semaphore\n/// @dev This contract uses the Semaphore base contracts to provide a complete service\n/// to allow admins to create and manage groups and their members to verify Semaphore proofs\n/// Group admins can add, update or remove group members, and can be an Ethereum account or a smart contract.\n/// This contract also assigns each new Merkle tree generated with a new root a duration (or an expiry)\n/// within which the proofs generated with that root can be validated.\ncontract Semaphore is ISemaphore, SemaphoreGroups {\n    ISemaphoreVerifier public verifier;\n\n    /// @dev Gets a group id and returns the group parameters.\n    mapping(uint256 => Group) public groups;\n\n    /// @dev Counter to assign an incremental id to the groups.\n    /// This counter is used to keep track of the number of groups created.\n    uint256 public groupCounter;\n\n    /// @dev Initializes the Semaphore verifier used to verify the user's ZK proofs.\n    /// @param _verifier: Semaphore verifier addresse.\n    constructor(ISemaphoreVerifier _verifier) {\n        verifier = _verifier;\n    }\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup() external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, msg.sender);\n\n        groups[groupId].merkleTreeDuration = 1 hours;\n    }\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup(address admin) external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, admin);\n\n        groups[groupId].merkleTreeDuration = 1 hours;\n    }\n\n    /// @dev See {ISemaphore-createGroup}.\n    function createGroup(address admin, uint256 merkleTreeDuration) external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, admin);\n\n        groups[groupId].merkleTreeDuration = merkleTreeDuration;\n    }\n\n    /// @dev See {SemaphoreGroups-_updateGroupAdmin}.\n    function updateGroupAdmin(uint256 groupId, address newAdmin) external override {\n        _updateGroupAdmin(groupId, newAdmin);\n    }\n\n    /// @dev See {SemaphoreGroups- acceptGroupAdmin}.\n    function acceptGroupAdmin(uint256 groupId) external override {\n        _acceptGroupAdmin(groupId);\n    }\n\n    /// @dev See {ISemaphore-updateGroupMerkleTreeDuration}.\n    function updateGroupMerkleTreeDuration(\n        uint256 groupId,\n        uint256 newMerkleTreeDuration\n    ) external override onlyGroupAdmin(groupId) {\n        uint256 oldMerkleTreeDuration = groups[groupId].merkleTreeDuration;\n\n        groups[groupId].merkleTreeDuration = newMerkleTreeDuration;\n\n        emit GroupMerkleTreeDurationUpdated(groupId, oldMerkleTreeDuration, newMerkleTreeDuration);\n    }\n\n    /// @dev See {SemaphoreGroups-_addMember}.\n    function addMember(uint256 groupId, uint256 identityCommitment) external override {\n        uint256 merkleTreeRoot = _addMember(groupId, identityCommitment);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_addMembers}.\n    function addMembers(uint256 groupId, uint256[] calldata identityCommitments) external override {\n        uint256 merkleTreeRoot = _addMembers(groupId, identityCommitments);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_updateMember}.\n    function updateMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external override {\n        uint256 merkleTreeRoot = _updateMember(groupId, identityCommitment, newIdentityCommitment, merkleProofSiblings);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_removeMember}.\n    function removeMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external override {\n        uint256 merkleTreeRoot = _removeMember(groupId, identityCommitment, merkleProofSiblings);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {ISemaphore-validateProof}.\n    function validateProof(uint256 groupId, SemaphoreProof calldata proof) external override {\n        // The function will revert if the nullifier that is part of the proof,\n        // was already used inside the group with id groupId.\n        if (groups[groupId].nullifiers[proof.nullifier]) {\n            revert Semaphore__YouAreUsingTheSameNullifierTwice();\n        }\n\n        // The function will revert if the proof is not verified successfully.\n        if (!verifyProof(groupId, proof)) {\n            revert Semaphore__InvalidProof();\n        }\n\n        // Saves the nullifier so that it cannot be used again to successfully verify a proof\n        // that is part of the group with id groupId.\n        groups[groupId].nullifiers[proof.nullifier] = true;\n\n        emit ProofValidated(\n            groupId,\n            proof.merkleTreeDepth,\n            proof.merkleTreeRoot,\n            proof.nullifier,\n            proof.message,\n            proof.scope,\n            proof.points\n        );\n    }\n\n    /// @dev See {ISemaphore-verifyProof}.\n    function verifyProof(\n        uint256 groupId,\n        SemaphoreProof calldata proof\n    ) public view override onlyExistingGroup(groupId) returns (bool) {\n        // The function will revert if the Merkle tree depth is not supported.\n        if (proof.merkleTreeDepth < MIN_DEPTH || proof.merkleTreeDepth > MAX_DEPTH) {\n            revert Semaphore__MerkleTreeDepthIsNotSupported();\n        }\n\n        // Gets the number of leaves in the Incremental Merkle Tree that represents the group\n        // with id groupId which is the same as the number of members in the group groupId.\n        uint256 merkleTreeSize = getMerkleTreeSize(groupId);\n\n        // The function will revert if there are no members in the group.\n        if (merkleTreeSize == 0) {\n            revert Semaphore__GroupHasNoMembers();\n        }\n\n        // Gets the Merkle root of the Incremental Merkle Tree that represents the group with id groupId.\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(groupId);\n\n        // A proof could have used an old Merkle tree root.\n        // https://github.com/semaphore-protocol/semaphore/issues/98\n        if (proof.merkleTreeRoot != currentMerkleTreeRoot) {\n            uint256 merkleRootCreationDate = groups[groupId].merkleRootCreationDates[proof.merkleTreeRoot];\n            uint256 merkleTreeDuration = groups[groupId].merkleTreeDuration;\n\n            if (merkleRootCreationDate == 0) {\n                revert Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\n            }\n\n            if (block.timestamp > merkleRootCreationDate + merkleTreeDuration) {\n                revert Semaphore__MerkleTreeRootIsExpired();\n            }\n        }\n\n        return\n            verifier.verifyProof(\n                [proof.points[0], proof.points[1]],\n                [[proof.points[2], proof.points[3]], [proof.points[4], proof.points[5]]],\n                [proof.points[6], proof.points[7]],\n                [proof.merkleTreeRoot, proof.nullifier, _hash(proof.message), _hash(proof.scope)],\n                proof.merkleTreeDepth\n            );\n    }\n\n    /// @dev Creates a keccak256 hash of a message compatible with the SNARK scalar modulus.\n    /// @param message: Message to be hashed.\n    /// @return Message digest.\n    function _hash(uint256 message) private pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(message))) >> 8;\n    }\n}\n"
    },
    "@zk-kit/lean-imt.sol/Constants.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n"
    },
    "@zk-kit/lean-imt.sol/InternalLeanIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {PoseidonT3} from \"poseidon-solidity/PoseidonT3.sol\";\nimport {SNARK_SCALAR_FIELD} from \"./Constants.sol\";\n\nstruct LeanIMTData {\n    // Tracks the current number of leaves in the tree.\n    uint256 size;\n    // Represents the current depth of the tree, which can increase as new leaves are inserted.\n    uint256 depth;\n    // A mapping from each level of the tree to the node value of the last even position at that level.\n    // Used for efficient inserts, updates and root calculations.\n    mapping(uint256 => uint256) sideNodes;\n    // A mapping from leaf values to their respective indices in the tree.\n    // This facilitates checks for leaf existence and retrieval of leaf positions.\n    mapping(uint256 => uint256) leaves;\n}\n\nerror WrongSiblingNodes();\nerror LeafGreaterThanSnarkScalarField();\nerror LeafCannotBeZero();\nerror LeafAlreadyExists();\nerror LeafDoesNotExist();\n\n/// @title Lean Incremental binary Merkle tree.\n/// @dev The LeanIMT is an optimized version of the BinaryIMT.\n/// This implementation eliminates the use of zeroes, and make the tree depth dynamic.\n/// When a node doesn't have the right child, instead of using a zero hash as in the BinaryIMT,\n/// the node's value becomes that of its left child. Furthermore, rather than utilizing a static tree depth,\n/// it is updated based on the number of leaves in the tree. This approach\n/// results in the calculation of significantly fewer hashes, making the tree more efficient.\nlibrary InternalLeanIMT {\n    /// @dev Inserts a new leaf into the incremental merkle tree.\n    /// The function ensures that the leaf is valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the new leaf to be inserted into the tree.\n    /// @return The new hash of the node after the leaf has been inserted.\n    function _insert(LeanIMTData storage self, uint256 leaf) internal returns (uint256) {\n        if (leaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (leaf == 0) {\n            revert LeafCannotBeZero();\n        } else if (_has(self, leaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = self.size;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // A new insertion can increase a tree's depth by at most 1,\n        // and only if the number of leaves supported by the current\n        // depth is less than the number of leaves to be supported after insertion.\n        if (2 ** treeDepth < index + 1) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        uint256 node = leaf;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                node = PoseidonT3.hash([self.sideNodes[level], node]);\n            } else {\n                self.sideNodes[level] = node;\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        self.size = ++index;\n\n        self.sideNodes[treeDepth] = node;\n        self.leaves[leaf] = index;\n\n        return node;\n    }\n\n    /// @dev Inserts many leaves into the incremental merkle tree.\n    /// The function ensures that the leaves are valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaves: The values of the new leaves to be inserted into the tree.\n    /// @return The root after the leaves have been inserted.\n    function _insertMany(LeanIMTData storage self, uint256[] calldata leaves) internal returns (uint256) {\n        // Cache tree size to optimize gas\n        uint256 treeSize = self.size;\n\n        // Check that all the new values are correct to be added.\n        for (uint256 i = 0; i < leaves.length; ) {\n            if (leaves[i] >= SNARK_SCALAR_FIELD) {\n                revert LeafGreaterThanSnarkScalarField();\n            } else if (leaves[i] == 0) {\n                revert LeafCannotBeZero();\n            } else if (_has(self, leaves[i])) {\n                revert LeafAlreadyExists();\n            }\n\n            self.leaves[leaves[i]] = treeSize + 1 + i;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Array to save the nodes that will be used to create the next level of the tree.\n        uint256[] memory currentLevelNewNodes;\n\n        currentLevelNewNodes = leaves;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // Calculate the depth of the tree after adding the new values.\n        // Unlike the 'insert' function, we need a while here as\n        // N insertions can increase the tree's depth more than once.\n        while (2 ** treeDepth < treeSize + leaves.length) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        // First index to change in every level.\n        uint256 currentLevelStartIndex = treeSize;\n\n        // Size of the level used to create the next level.\n        uint256 currentLevelSize = treeSize + leaves.length;\n\n        // The index where changes begin at the next level.\n        uint256 nextLevelStartIndex = currentLevelStartIndex >> 1;\n\n        // The size of the next level.\n        uint256 nextLevelSize = ((currentLevelSize - 1) >> 1) + 1;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            // The number of nodes for the new level that will be created,\n            // only the new values, not the entire level.\n            uint256 numberOfNewNodes = nextLevelSize - nextLevelStartIndex;\n            uint256[] memory nextLevelNewNodes = new uint256[](numberOfNewNodes);\n            for (uint256 i = 0; i < numberOfNewNodes; ) {\n                uint256 leftNode;\n\n                // Assign the left node using the saved path or the position in the array.\n                if ((i + nextLevelStartIndex) * 2 < currentLevelStartIndex) {\n                    leftNode = self.sideNodes[level];\n                } else {\n                    leftNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 - currentLevelStartIndex];\n                }\n\n                uint256 rightNode;\n\n                // Assign the right node if the value exists.\n                if ((i + nextLevelStartIndex) * 2 + 1 < currentLevelSize) {\n                    rightNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 + 1 - currentLevelStartIndex];\n                }\n\n                uint256 parentNode;\n\n                // Assign the parent node.\n                // If it has a right child the result will be the hash(leftNode, rightNode) if not,\n                // it will be the leftNode.\n                if (rightNode != 0) {\n                    parentNode = PoseidonT3.hash([leftNode, rightNode]);\n                } else {\n                    parentNode = leftNode;\n                }\n\n                nextLevelNewNodes[i] = parentNode;\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            // Update the `sideNodes` variable.\n            // If `currentLevelSize` is odd, the saved value will be the last value of the array\n            // if it is even and there are more than 1 element in `currentLevelNewNodes`, the saved value\n            // will be the value before the last one.\n            // If it is even and there is only one element, there is no need to save anything because\n            // the correct value for this level was already saved before.\n            if (currentLevelSize & 1 == 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 1];\n            } else if (currentLevelNewNodes.length > 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 2];\n            }\n\n            currentLevelStartIndex = nextLevelStartIndex;\n\n            // Calculate the next level startIndex value.\n            // It is the position of the parent node which is pos/2.\n            nextLevelStartIndex >>= 1;\n\n            // Update the next array that will be used to calculate the next level.\n            currentLevelNewNodes = nextLevelNewNodes;\n\n            currentLevelSize = nextLevelSize;\n\n            // Calculate the size of the next level.\n            // The size of the next level is (currentLevelSize - 1) / 2 + 1.\n            nextLevelSize = ((nextLevelSize - 1) >> 1) + 1;\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        // Update tree size\n        self.size = treeSize + leaves.length;\n\n        // Update tree root\n        self.sideNodes[treeDepth] = currentLevelNewNodes[0];\n\n        return currentLevelNewNodes[0];\n    }\n\n    /// @dev Updates the value of an existing leaf and recalculates hashes\n    /// to maintain tree integrity.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf that is to be updated.\n    /// @param newLeaf: The new value that will replace the oldLeaf in the tree.\n    /// @param siblingNodes: An array of sibling nodes that are necessary to recalculate the path to the root.\n    /// @return The new hash of the updated node after the leaf has been updated.\n    function _update(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256 newLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        if (newLeaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (!_has(self, oldLeaf)) {\n            revert LeafDoesNotExist();\n        } else if (_has(self, newLeaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = _indexOf(self, oldLeaf);\n        uint256 node = newLeaf;\n        uint256 oldRoot = oldLeaf;\n\n        uint256 lastIndex = self.size - 1;\n        uint256 i = 0;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                    revert LeafGreaterThanSnarkScalarField();\n                }\n\n                node = PoseidonT3.hash([siblingNodes[i], node]);\n                oldRoot = PoseidonT3.hash([siblingNodes[i], oldRoot]);\n\n                unchecked {\n                    ++i;\n                }\n            } else {\n                if (index >> level != lastIndex >> level) {\n                    if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                        revert LeafGreaterThanSnarkScalarField();\n                    }\n\n                    node = PoseidonT3.hash([node, siblingNodes[i]]);\n                    oldRoot = PoseidonT3.hash([oldRoot, siblingNodes[i]]);\n\n                    unchecked {\n                        ++i;\n                    }\n                } else {\n                    self.sideNodes[i] = node;\n                }\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        if (oldRoot != _root(self)) {\n            revert WrongSiblingNodes();\n        }\n\n        self.sideNodes[treeDepth] = node;\n\n        if (newLeaf != 0) {\n            self.leaves[newLeaf] = self.leaves[oldLeaf];\n        }\n\n        self.leaves[oldLeaf] = 0;\n\n        return node;\n    }\n\n    /// @dev Removes a leaf from the tree by setting its value to zero.\n    /// This function utilizes the update function to set the leaf's value\n    /// to zero and update the tree's state accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf to be removed.\n    /// @param siblingNodes: An array of sibling nodes required for updating the path to the root after removal.\n    /// @return The new root hash of the tree after the leaf has been removed.\n    function _remove(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        return _update(self, oldLeaf, 0, siblingNodes);\n    }\n\n    /// @dev Checks if a leaf exists in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf to check for existence.\n    /// @return A boolean value indicating whether the leaf exists in the tree.\n    function _has(LeanIMTData storage self, uint256 leaf) internal view returns (bool) {\n        return self.leaves[leaf] != 0;\n    }\n\n    /// @dev Retrieves the index of a given leaf in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf whose index is to be found.\n    /// @return The index of the specified leaf within the tree. If the leaf is not present, the function\n    /// reverts with a custom error.\n    function _indexOf(LeanIMTData storage self, uint256 leaf) internal view returns (uint256) {\n        if (self.leaves[leaf] == 0) {\n            revert LeafDoesNotExist();\n        }\n\n        return self.leaves[leaf] - 1;\n    }\n\n    /// @dev Retrieves the root of the tree from the 'sideNodes' mapping using the\n    /// current tree depth.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @return The root hash of the tree.\n    function _root(LeanIMTData storage self) internal view returns (uint256) {\n        return self.sideNodes[self.depth];\n    }\n}\n"
    },
    "contracts/Ballot.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@semaphore-protocol/contracts/interfaces/ISemaphore.sol\";\n\n/// @title Voting with delegation.a\ncontract Ballot {\n\n    ISemaphore public semaphore;\n    uint256 public groupId;\n\n    struct Voter {\n        bool joined;\n        uint vote;\n    }\n\n    struct Proposal {\n        bytes32 name;\n        uint voteCount;\n    }\n\n    mapping(address => Voter) public voters;\n\n    Proposal[] public proposals;\n\n    constructor(bytes32[] memory proposalNames, ISemaphore _semaphore) {\n        semaphore = _semaphore;\n        groupId = semaphore.createGroup();\n\n        for (uint i = 0; i < proposalNames.length; i++) {\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\n        }\n    }\n\n    function vote(uint proposal, ISemaphore.SemaphoreProof calldata proof) external {\n        Voter storage voter = voters[msg.sender];\n        require(voter.joined, \"Did not joined the voting group\");\n\n        // This will validate the proof and revert if the proof was already used\n        // which means that each user that joined can only vote once \n        semaphore.validateProof(groupId, proof);\n\n        voter.vote = proposal;\n\n        // If `proposal` is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        proposals[proposal].voteCount += 1;\n    }\n\n    /// @dev User joins the voting poll\n    /// each user can only join and vote once.\n    function joinBallot(uint256 identityCommitment) external {\n        require(!voters[msg.sender].joined, \"User already joined the ballot\");\n        semaphore.addMember(groupId, identityCommitment);\n        voters[msg.sender].joined = true;\n    }\n\n    /// @dev Computes the winning proposal taking all\n    /// previous votes into account.\n    function winningProposal() public view returns (uint winningProposal_) {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    // Calls winningProposal() function to get the index\n    // of the winner contained in the proposals array and then\n    // returns the name of the winner\n    function winnerName() external view returns (bytes32 winnerName_) {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n\n    function proposalCount() public view returns(uint count) {\n        return proposals.length;\n    }\n\n    function getAllProposals() public view returns (Proposal[] memory) {\n        return proposals;\n    }\n}"
    },
    "contracts/BallotFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./Ballot.sol\";\nimport \"@semaphore-protocol/contracts/interfaces/ISemaphore.sol\";\n\ncontract BallotFactory {\n    Ballot[] public ballots;\n    ISemaphore public semaphore;\n\n    event BallotCreated(address ballotAddress, uint256 groupId);\n\n    constructor(ISemaphore _semaphore) {\n        semaphore = _semaphore;\n    }\n\n    function createBallot(bytes32[] memory proposalNames) public returns (address) {\n        Ballot newBallot = new Ballot(proposalNames, semaphore);\n        ballots.push(newBallot);\n        emit BallotCreated(address(newBallot), newBallot.groupId());\n\n        return address(newBallot);\n    }\n\n    function getBallotCount() public view returns (uint) {\n        return ballots.length;\n    }\n\n    function getBallotAddress(uint index) public view returns (address) {\n        require(index < ballots.length, \"Invalid index\");\n        \n        return address(ballots[index]);\n    }\n\n    function getAllBallots() public view returns (Ballot[] memory) {\n        return ballots;\n    }    \n}"
    },
    "contracts/hardhat-dependency-compiler/@semaphore-protocol/contracts/base/SemaphoreVerifier.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@semaphore-protocol/contracts/base/SemaphoreVerifier.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@semaphore-protocol/contracts/Semaphore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@semaphore-protocol/contracts/Semaphore.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/poseidon-solidity/PoseidonT3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'poseidon-solidity/PoseidonT3.sol';\n"
    },
    "poseidon-solidity/PoseidonT3.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nlibrary PoseidonT3 {\n  uint constant M00 = 0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b;\n  uint constant M01 = 0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771;\n  uint constant M02 = 0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7;\n  uint constant M10 = 0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0;\n  uint constant M11 = 0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23;\n  uint constant M12 = 0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911;\n\n  // See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\n  // Inspired by: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\n  function hash(uint[2] memory) public pure returns (uint) {\n    assembly {\n      let F := 21888242871839275222246405745257275088548364400416034343698204186575808495617\n      let M20 := 0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d\n      let M21 := 0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa\n      let M22 := 0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0\n\n      // load the inputs from memory\n      let state1 := add(mod(mload(0x80), F), 0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864)\n      let state2 := add(mod(mload(0xa0), F), 0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5)\n      let scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(\n        0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0,\n        add(add(15452833169820924772166449970675545095234312153403844297388521437673434406763, mulmod(state1, M10, F)), mulmod(state2, M20, F))\n      )\n      let scratch1 := add(\n        0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2,\n        add(add(18674271267752038776579386132900109523609358935013267566297499497165104279117, mulmod(state1, M11, F)), mulmod(state2, M21, F))\n      )\n      let scratch2 := add(\n        0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa,\n        add(add(14817777843080276494683266178512808687156649753153012854386334860566696099579, mulmod(state1, M12, F)), mulmod(state2, M22, F))\n      )\n      let state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n\n      mstore(0x0, mod(add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)), F))\n\n      return(0, 0x20)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}